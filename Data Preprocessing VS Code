import nibabel as nib
import numpy as np
from stl import mesh
from skimage import measure
#040078_19000101_AX_T1_FL3D_img.nii
#040078_19000101_AX_T1_FL3D_msk.nii
#040078_19000415_Ax_FSPGR_BRAVO_img.nii
#040078_19000415_Ax_FSPGR_BRAVO_msk.nii
#040078_19000715_Ax_FSPGR_BRAVO_img.nii
#040078_19000715_Ax_FSPGR_BRAVO_msk.nii
#040078_19001007_Ax_FSPGR_BRAVO_img.nii
#040078_19001007_Ax_FSPGR_BRAVO_msk.nii
#040078_19010105_Ax_FSPGR_BRAVO_img.nii
#040078_19010105_Ax_FSPGR_BRAVO_msk.nii
#040078_19010305_Ax_FSPGR_BRAVO_img.nii
#040078_19010305_Ax_FSPGR_BRAVO_msk.nii

file_list = []

def niitostl(filepath):
   
    file_path = filepath
    # Extract the numpy array
    nifti_file = nib.load(file_path)
    np_array = nifti_file.get_fdata()
    verts, faces, normals, values = measure.marching_cubes(np_array, 0)
    obj_3d = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))
    for i, f in enumerate(faces):
        obj_3d.vectors[i] = verts[f]
    # Save the STL file with the name and the path
    obj_3d.save(filepath + ".stl")

    return


for i in file_list:
    niitostl(i)

